from flask import Flask
from threading import Thread
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import time
import json
import os
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logging.getLogger('werkzeug').setLevel(logging.ERROR)

app = Flask(__name__)

@app.route('/')
def home():
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>ü§ñ Telegram Bot</title>
        <meta charset="UTF-8">
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            .container { max-width: 600px; margin: 0 auto; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ Telegram Bot</h1>
            <p>Status: <strong>üü¢ ONLINE</strong></p>
            <p>Running on Render.com 24/7</p>
        </div>
    </body>
    </html>
    """

@app.route('/health')
def health():
    return "‚úÖ OK"

@app.route('/ping')
def ping():
    return "pong"

# –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
def get_uptime():
    seconds = int(time.time() - start_time)
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    return f"{hours}—á {minutes}–º"

def load_users():
    try:
        if not os.path.exists('users.json'):
            return set()
        if os.path.getsize('users.json') == 0:
            return set()
        with open('users.json', 'r') as f:
            data = json.load(f)
            return set(data) if isinstance(data, list) else set()
    except:
        return set()

def save_users():
    try:
        with open('users.json', 'w') as f:
            json.dump(list(users_db), f)
    except:
        pass

def add_user(user_id):
    if user_id not in users_db:
        users_db.add(user_id)
        save_users()
        return True
    return False

def track_user(update, context):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    is_new_user = add_user(user_id)
    
    if is_new_user:
        print(f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")
    
    return user_name, is_new_user

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
TOKEN = os.environ.get('BOT_TOKEN', "8239093462:AAHx0SXFXUu45qvCTmz2PwQdPgggtxipot0")
DISCORD_LINK = "https://discord.gg/xesWFVH59m"
TIKTOK_LINK = "https://www.tiktok.com/@jordjostar52"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
start_time = time.time()
users_db = load_users()

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update, context):
    user_name, is_new_user = track_user(update, context)
    uptime = get_uptime()
    
    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n\n"
        f"üìã **–ö–æ–º–∞–Ω–¥—ã:**\n"
        f"/discord - Discord —Å–µ—Ä–≤–µ—Ä\n"
        f"/tiktok - TikTok —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\n"
        f"/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"/help - –ü–æ–º–æ—â—å\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_db)}\n"
        f"‚è∞ –†–∞–±–æ—Ç–∞–µ—Ç: {uptime}\n\n"
        f"‚ö° **–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–æ–∫!**"
    )
    await update.message.reply_text(message, parse_mode='Markdown')

async def help_command(update, context):
    user_name, _ = track_user(update, context)
    message = "‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Discord –∏ TikTok!"
    await update.message.reply_text(message)

async def discord_command(update, context):
    user_name, _ = track_user(update, context)
    message = f"üéÆ **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É Discord!**\n\n{DISCORD_LINK}"
    await update.message.reply_text(message, parse_mode='Markdown')

async def tiktok_command(update, context):
    user_name, _ = track_user(update, context)
    message = f"üéµ **–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ TikTok!**\n\n{TIKTOK_LINK}"
    await update.message.reply_text(message, parse_mode='Markdown')

async def stats_command(update, context):
    user_name, _ = track_user(update, context)
    uptime = get_uptime()
    message = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_db)}\n"
        f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
        f"üöÄ –•–æ—Å—Ç–∏–Ω–≥: Render.com"
    )
    await update.message.reply_text(message, parse_mode='Markdown')

async def handle_all_messages(update, context):
    user_name, is_new_user = track_user(update, context)
    
    message = (
        f"üéâ **–ü—Ä–∏–≤–µ—Ç, {user_name}!**\n\n"
        f"üîó **–ù–∞—à–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:**\n\n"
        f"üéÆ **Discord:** {DISCORD_LINK}\n\n"
        f"üéµ **TikTok:** {TIKTOK_LINK}\n\n"
        f"‚ú® **–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!**"
    )
    await update.message.reply_text(message, parse_mode='Markdown')

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—Ç—É"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π
        port = int(os.environ.get('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Flask: {e}")

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("discord", discord_command))
        application.add_handler(CommandHandler("tiktok", tiktok_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))
        
        print("=" * 50)
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render.com!")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_db)}")
        print("üåê Web —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –î–∞–µ–º –≤—Ä–µ–º—è Flask –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(2)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_bot()
